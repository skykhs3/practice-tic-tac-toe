{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","isEnd","id","a","b","c","className","onClick","value","style","color","Board","i","this","squares","console","log","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","current","winner","abc","lines","calculateWinner2","moves","map","index","desc","key","jumpTo","handleClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0805452.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n// class Square extends React.Component {\n\n//     render() {\n//       return (\n//         <button className=\"square\" onClick={()=>this.props.onClick()}>\n//           {this.props.value}\n//         </button>\n//       );\n//     }\n//   }\nfunction Square(props) {\n\n  if(props.isEnd && (props.id==props.a || props.id==props.b || props.id==props.c) ){\n    return(\n    <button style={{color:'red'}}className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n    );\n  }\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  // constructor(props){\n  //     super(props);\n  //     this.state={\n  //         squares:Array(9).fill(null),\n  //         xIsNext:true,\n  //     }\n  // }\n\n  \n  renderSquare(i) {\n    \n    return <Square id ={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)}\n    a={this.props.a} b={this.props.b} c={this.props.c} isEnd={this.props.isEnd} />;\n  }\n\n  render() {\n    console.log('winner:'+this.props.isEnd);\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber:history.length,\n    });\n  }\n  jumpTo(step){\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const square = current.squares.slice();\n    const winner = calculateWinner(current.squares);\n    const abc=calculateWinner2(current.squares);\n\n    const moves = history.map((step, index) => {\n      const desc = index ?\n        'Go to move #' + index :\n        'Go to game start';\n      return (\n        <li key={index}>\n          <button onClick={() => this.jumpTo(index)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      if(this.state.stepNumber==9){\n        status='There is no winner';\n      }\n      else{\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n    }\n    \n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={(i) => this.handleClick(i)} \n          isEnd={winner} a={abc[0]} b={abc[1]} c={abc[2]}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return false;\n}\nfunction calculateWinner2(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [a,b,c];\n    }\n  }\n  return [];\n}\nserviceWorker.unregister();\n"],"sourceRoot":""}